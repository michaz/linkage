package linkage;import java.awt.*;import java.awt.geom.*;import java.awt.image.BufferedImage;public class LinkageDrawer extends Panel {		//    private Thread thread;	private BufferedImage bimg;		private CIDOUnfolder luf;		public LinkageDrawer(CIDOUnfolder luf) {		this.luf = luf;	}		public void drawDemo(int w, int h, Graphics2D g2) {		double[] x=luf.getX();		double[] y=luf.getY();		int n = x.length;		g2.setStroke(new BasicStroke(1.0f));    		g2.setPaint(Color.BLUE);		GeneralPath path = new GeneralPath();		path.moveTo((float)x[0],(float)y[0]);		for (int i = 1; i < n; i++) {			path.lineTo((float)x[i],(float)y[i]);		}		if(luf.isClosed()) {			path.lineTo((float)x[0],(float)y[0]);		}				// TODO: mark special vertex		if(luf.isClosed()) {					}				Rectangle bounds = path.getBounds();		AffineTransform at = new AffineTransform();		double maxbounds = Math.max(bounds.width,bounds.height);		double minwindowdim = Math.min(w,h);		// at.scale((double)w/(double) bounds.width,(double) h/(double) bounds.height);		at.scale(minwindowdim/maxbounds,minwindowdim/maxbounds);		at.translate(-bounds.x, -bounds.y);		g2.setColor(Color.blue);		Shape s = at.createTransformedShape(path);		g2.draw(s);		if(luf.isClosed()) {			g2.setColor(Color.red);			s = new Line2D.Double(x[luf.lastVertex()-1],y[luf.lastVertex()-1],									x[luf.lastVertex()%n],y[luf.lastVertex()%n]);			g2.draw(at.createTransformedShape(s));		}	}		public Graphics2D createGraphics2D(int w, int h) {		Graphics2D g2 = null;		if (bimg == null || bimg.getWidth() != w || bimg.getHeight() != h) {			bimg = (BufferedImage) createImage(w, h);		} 		g2 = bimg.createGraphics();		g2.setBackground(Color.white);		g2.clearRect(0, 0, w, h);		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,				RenderingHints.VALUE_ANTIALIAS_ON);		return g2;	}			public void paint(Graphics g) {		Dimension d = getSize();		Graphics2D g2 = createGraphics2D(d.width, d.height);		drawDemo(d.width, d.height, g2);		g2.dispose();		g.drawImage(bimg, 0, 0, this);	}	}